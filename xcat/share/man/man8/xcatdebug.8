.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XCATDEBUG.8 8"
.TH XCATDEBUG.8 8 "2013-03-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBxcatdebug\fR \- Enable or disable the trace facilities for xCAT. (Only supports Linux Operating System)
.PP
\&\fBxcatdebug\fR { [\fB\-f enable|disable\fR [\fB\-c configuration file | subroutine list\fR]] | [ \fB\-d enable |disable\fR]}
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
xCAT offers two trace facilities to debug the xCAT:
.IP "\(bu" 3
\&\fBSubroutine calling trace\fR
.Sp
Display the calling trace for subroutine when it is called. 
.Sp
The trace message includes: The name of the called subroutine; The arguments which passed to the called subroutine; The calling stack of the subroutine. By default, the trace will be enabled to all the subroutines in the xcatd and plugin modules. The target subroutine can be configured by configuration file or through xcatdebug command line.
.Sp
The flag \fB\-c\fR is used to specify the subroutine list for \fBsubroutine calling trace\fR, it can only work with \fB\-f\fR. The value of \fB\-c\fR can be a configuration file or a subroutine list.
  \fBconfiguration file\fR: a file contains multiple lines of \fB\s-1SUBROUTINE_DEFINITION\s0\fR
  \fBsubroutine list\fR:    \fB\s-1SUBROUTINE_DEFINITION\s0\fR|\fB\s-1SUBROUTINE_DEFINITION\s0\fR|...
.Sp
\&\fB\s-1SUBROUTINE_DEFINITION\s0\fR: is the element for the \fB\-c\fR to specify the subroutine list.
.Sp
The format of \fB\s-1SUBROUTINE_DEFINITION\s0\fR: [plugin](subroutine1,subroutine2,...)
.Sp
If ignoring the [plugin], the subroutines in the () should be defined in the xcatd.
    e.g. (daemonize,do_installm_service,do_udp_service)
.Sp
Otherwise, the package name of the plugin should be specified.
    e.g. xCAT::Utils(isMN,Version)
    e.g. xCAT_plugin::DBobjectdefs(defls,process_request)
.Sp
The trace log will be written to /var/log/xcat/subcallingtrace. The log file subcallingtrace will be backed up for each running of the \fBxcatdebug \-f enable\fR.
.IP "\(bu" 3
\&\fBCommented trace log\fR
.Sp
The trace log code is presented as comments in the code of xCAT. In general mode, it will be kept as comments. But in debug mode, it will be commented back as common code to display the trace log.
.Sp
\&\s-1NOTE:\s0 This facility can be enabled by pass the \fBENABLE_TRACE_CODE=1\fR global variable when running the xcatd. e.g. ENABLE_TRACE_CODE=1 xcatd \-f
.Sp
This facility offers two formats for the trace log code:
.RS 3
.IP "\(bu" 2
Trace section
    ## \s-1TRACE_BEGIN\s0
    # print \*(L"In the debug\en\*(R";
    ## \s-1TRACE_END\s0
.IP "\(bu" 2
Trace in a single line
    ## \s-1TRACE_LINE\s0 print \*(L"In the trace line\en\*(R";
.RE
.RS 3
.Sp
The \fBcommented trace log\fR can be added in xcatd and plugin modules. But following section has been added into the \s-1BEGIN\s0 {} section of the target plugin module to enable the facility.
.Sp
.Vb 4
\&   if (defined $ENV{ENABLE_TRACE_CODE}) {
\&     use xCAT::Enabletrace qw(loadtrace filter);
\&     loadtrace();
\&   }
.Ve
.RE
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-f\fR" 6
.IX Item "-f"
Enable or disable the \fBsubroutine calling trace\fR. 
.Sp
For \fBenable\fR, if ignoring the \fB\-c\fR flag, all the subroutines in the xcatd and plugin modules will be enabled.
.Sp
For \fBdisable\fR, all the subroutines which has been enabled by \fB\-f enable\fR will be disabled. \fB\-c\fR will be ignored.
.IP "\fB\-c\fR" 6
.IX Item "-c"
Specify the configuration file or subroutine list.
.RS 6
.IP "*" 2
\&\fBconfiguration file\fR: a file contains multiple lines of \fB\s-1SUBROUTINE_DEFINITION\s0\fR
  e.g.
    (plugin_command)
    xCAT_plugin::DBobjectdefs(defls,process_request)
    xCAT::DBobjUtils(getobjdefs)
.ie n .IP "* \fBsubroutine list\fR: a string like  \fB\s-1SUBROUTINE_DEFINITION\s0\fR|\fB\s-1SUBROUTINE_DEFINITION\s0\fR|... e.g. ""(plugin_command)|xCAT_plugin::DBobjectdefs(defls,process_request)|xCAT::DBobjUtils(getobjdefs)""" 2
.el .IP "* \fBsubroutine list\fR: a string like  \fB\s-1SUBROUTINE_DEFINITION\s0\fR|\fB\s-1SUBROUTINE_DEFINITION\s0\fR|... e.g. ``(plugin_command)|xCAT_plugin::DBobjectdefs(defls,process_request)|xCAT::DBobjUtils(getobjdefs)''" 2
.IX Item "subroutine list: a string like  SUBROUTINE_DEFINITION|SUBROUTINE_DEFINITION|... e.g. (plugin_command)|xCAT_plugin::DBobjectdefs(defls,process_request)|xCAT::DBobjUtils(getobjdefs)"
.RE
.RS 6
.RE
.PD 0
.IP "\fB\-d\fR" 6
.IX Item "-d"
.PD
Enable or disable the \fBcommented trace log\fR.
.Sp
Note: The xcatd will be restarted for the performing of \fB\-d\fR. 
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "1" 4
.IX Item "1"
Enable the \fBsubroutine calling trace\fR for all the subroutines in the xcatd and plugin modules.
  \fBxcatdebug\fR \-f enable
.IP "2" 4
.IX Item "2"
Enable the \fBsubroutine calling trace\fR for the subroutines configured in the /opt/xcat/share/xcat/samples/tracelevel0
  \fBxcatdebug\fR \-f enable \-c /opt/xcat/share/xcat/samples/tracelevel0
.IP "3" 4
.IX Item "3"
Enable the \fBsubroutine calling trace\fR for the plugin_command in xcatd and defls,process_request in the xCAT_plugin::DBobjectdefs module.
  \fBxcatdebug\fR \-f enable \-c \*(L"xCAT_plugin::DBobjectdefs(defls,process_request)|(plugin_command)\*(R"
.IP "4" 4
.IX Item "4"
Disable the \fBsubroutine calling trace\fR for all the subroutines which have been enabled by \fBxcatdebug \-f enable\fR.
  \fBxcatdebug\fR \-f disable
.IP "5" 4
.IX Item "5"
Enable the \fBcommented trace log\fR
  \fBxcatdebug\fR \-d enable
.IP "6" 4
.IX Item "6"
Enable both the \fBsubroutine calling trace\fR and \fBcommented trace log\fR
  \fBxcatdebug\fR \-f enable \-c /opt/xcat/share/xcat/samples/tracelevel0 \-d enable

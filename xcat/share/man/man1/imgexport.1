.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IMGEXPORT.1 1"
.TH IMGEXPORT.1 1 "2013-02-06" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBimgexport\fR \- Exports an xCAT image.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBimgexport [\-h| \-\-help]\fR
.PP
\&\fBimgexport image_name [destination] [[\-e|\-\-extra file:dir] ... ] [\-p|\-\-postscripts node_name] [\-v|\-\-verbose]\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The imgexport command will export an image that is being used by xCAT.  To export images, you must have the images defined in the \fIosimage\fR table. All the columns in the \fIosimage\fR and \fIlinuximage\fR tables will be exported. In addition, the following files will also be exported.
.PP
For statefull:
  x.pkglist
  x.otherpkgs.pkglist
  x.tmpl
  x.synclist
.PP
For stateless:
  kernel
  initrd.gz
  rootimg.gz
  x.pkglist
  x.otherpkgs.pkglist
  x.synclist
  x.postinstall
  x.exlist
.PP
For statelite:
  kernel
  initrd.gz
  root image tree
  x.pkglist
  x.synclist
  x.otherpkgs.pkglist
  x.postinstall
  x.exlist
.PP
where x is the name of the profile.
.PP
Any files specified by the \-e flag will also be exported. If \-p flag is specified, the names of the postscripts and the postbootscripts for the given node will be exported. The postscripts themsleves need to be manualy exported using \-e flag. 
.PP
For statelite, the litefile table settings for the image will also be exported. The litetree and statelite tables are not exported.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-e|\-\-extra\fR \fIsrcfile:destdir\fR    Pack up extra files. If \fIdestdir\fR is omitted, the destination directory will be the same as the source directory. 
.PP
\&\fB\-h|\-\-help\fR                         Display usage message.
.PP
\&\fB\-p|\-\-postscripts\fR \fInode_name\fR  Get the names of the postscripts and postbootscripts for the given node and pack them into the image. 
.PP
\&\fB\-v|\-\-verbose\fR                      Verbose output.
.PP
\&\fIimage_name\fR                        The name of the image. Use \fIlsdef \-t\fR osimage to find out all the image names. 
.PP
\&\fIdestination\fR                       The output bundle file name. 
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0 The command completed successfully.
.PP
1 An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
1. Simplest way to export an image.  If there is an image in the osimage table named 'foo', then run:
.PP
\&\fBimgexport foo\fR
.PP
foo.tgz will be built in the current working directory.  Make sure that you have enough space in the directory that you are in to run imgexport if you have a big image to tar up.
.PP
2. To include extra files with your image:
.PP
\&\fBimgexport Default_Stateless_1265981465 foo.tgz \-e /install/postscripts/myscript1  \-e /tmp/mydir:/usr/mydir\fR
.PP
In addition to all the default files, this will export \fI/install/postscripts/myscript1\fR and the whole directory \fI/tmp/dir\fR into the file called foo.tgz.  And when imgimport is called  \fI/install/postscripts/myscript1\fR will be copied into the same directory and \fI/tmp/mydir\fR will be copied to \fI/usr/mydir\fR. 
.PP
3. To include postscript with your image:
.PP
\&\fBimgexport Default_Stateless_1265981465 foo.tgz \-p node1 \-e /install/postscripts/myscript1\fR
.PP
The \fIpostscripts\fR and the \fIpostbootscripts\fR names specified in the \fIpostscripts\fR table for node1 will be exported into the image. The postscript \fImyscript1\fR will also be exported.
.SH "FILES"
.IX Header "FILES"
/opt/xcat/bin/imgexport
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIimgimport\fR\|(1)

.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LSKIT.1 1"
.TH LSKIT.1 1 "2013-05-03" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBlskit\fR \- list info for one or more kits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBlskit\fR [\fB\-V\fR | \fB\-\-verbose\fR] 
      [\fB\-x\fR | \fB\-\-xml\fR | \fB\-\-XML\fR]
      [\fB\-K\fR | \fB\-\-kitattr\fR \fIkitattr_names\fR]
      [\fB\-R\fR | \fB\-\-repoattr\fR \fIrepoattr_names\fR]
      [\fB\-C\fR | \fB\-\-compattr\fR \fIcompattr_names\fR]
      [kit_names]
.PP
\&\fBlskit\fR [\fB\-?\fR | \fB\-h\fR | \fB\-\-help\fR | \fB\-v\fR | \fB\-\-version\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBlskit\fR command is used to list info for one or more kits. A kit is a special kind of package that is used to install a software product on one or more nodes in an xCAT cluster.
.PP
The \fBlskit\fR command outputs the following info for each kit: the kit's basic info, the kit's repositories, and the kit's components.  The command outputs the info in two formats: human-readable format (default), and \s-1XML\s0 format.  Use the \-x option to view the info in \s-1XML\s0 format.
.PP
Input to the command can specify any number or combination of the input options.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-K|\-\-kitattr\fR \fIkitattr_names\fR" 10
.IX Item "-K|--kitattr kitattr_names"
where \fIkitattr_names\fR is a comma-delimited list of kit attribute names. The names correspond to attribute names in the \fBkit\fR table. The \fBlskit\fR command will only display the specified kit attributes.
.IP "\fB\-R|\-\-repoattr\fR \fIrepoattr_names\fR" 10
.IX Item "-R|--repoattr repoattr_names"
where \fIrepoattr_names\fR is a comma-delimited list of kit repository attribute names. The names correspond to attribute names in the \fBkitrepo\fR table. The \fBlskit\fR command will only display the specified kit repository attributes.
.IP "\fB\-C|\-\-compattr\fR \fIcompattr_names\fR" 10
.IX Item "-C|--compattr compattr_names"
where \fIcompattr_names\fR is a comma-delimited list of kit component attribute names. The names correspond to attribute names in the \fBkitcomponent\fR table. The \fBlskit\fR command will only display the specified kit component attributes.
.IP "\fIkit_names\fR" 10
.IX Item "kit_names"
is a comma-delimited list of kit names. The \fBlskit\fR command will only display the kits matching these names.
.IP "\fB\-x|\-\-xml|\-\-XML\fR" 10
.IX Item "-x|--xml|--XML"
Return the output with \s-1XML\s0 tags.  The data is returned as:
  <data>
    <kitinfo>
       ...
    </kitinfo>
  </data>
  ...
  <data>
    <kitinfo>
       ...
    </kitinfo>
  </data>
.Sp
Each <kitinfo> tag contains info for one kit.  The info inside <kitinfo> is structured as follows:
  The <kit> sub-tag contains the kit's basic info.
  The <kitrepo> sub-tags store info about the kit's repositories.
  The <kitcomponent> sub-tags store info about the kit's components.
.Sp
The data inside <kitinfo> is returned as:
  <kitinfo>
     <kit>
       ...
     </kit>
.Sp
.Vb 4
\&     <kitrepo>
\&       ...
\&     </kitrepo>
\&     ...
.Ve
.Sp
.Vb 5
\&     <kitcomponent>
\&       ...
\&     </kitcomponent>
\&     ...
\&  </kitinfo>
.Ve
.IP "\fB\-V|\-\-verbose\fR" 10
.IX Item "-V|--verbose"
Display additional progress and error messages. 
.IP "\fB\-v|\-\-version\fR" 10
.IX Item "-v|--version"
Command Version.
.IP "\fB\-?|\-h|\-\-help\fR" 10
.IX Item "-?|-h|--help"
Display usage message.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
.IP "0" 3
The command completed successfully.
.IP "1" 3
.IX Item "1"
An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "1." 3
To list all kits, enter:
.Sp
.Vb 1
\&  lskit
.Ve
.IP "2." 3
To list the kit \*(L"kit\-test1\-1.0\-Linux\*(R", enter:
.Sp
.Vb 1
\&  lskit kit-test1-1.0-Linux
.Ve
.IP "3." 3
To list the kit \*(L"kit\-test1\-1.0\-Linux\*(R" for selected attributes, enter:
.Sp
.Vb 1
\&  lskit -K basename,description -R kitreponame -C kitcompname kit-test1-1.0-Linux
.Ve
.SH "FILES"
.IX Header "FILES"
/opt/xcat/bin/lskit
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlskitcomp\fR\|(1), \fIlskitdeployparam\fR\|(1), \fIaddkit\fR\|(1), \fIrmkit\fR\|(1), \fIaddkitcomp\fR\|(1), \fIrmkitcomp\fR\|(1)

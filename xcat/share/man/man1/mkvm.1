.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MKVM.1 1"
.TH MKVM.1 1 "2013-02-18" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBmkvm\fR \- Creates HMC\-, IVM\-, and zVM\-managed partitions or other virtual machines.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Common:"
.IX Subsection "Common:"
\&\fBmkvm\fR [\fB\-h\fR| \fB\-\-help\fR]
.PP
\&\fBmkvm\fR [\fB\-v\fR| \fB\-\-version\fR]
.Sh "For \s-1PPC\s0 (with \s-1HMC\s0):"
.IX Subsection "For PPC (with HMC):"
\&\fBmkvm\fR [\fB\-V\fR| \fB\-\-verbose\fR] \fInoderange\fR \fB\-i\fR \fIid\fR \fB\-l\fR \fIsinglenode\fR
.PP
\&\fBmkvm\fR [\fB\-V\fR| \fB\-\-verbose\fR] \fInoderange\fR \fB\-c\fR \fIdestcec\fR \fB\-p\fR \fIprofile\fR
.PP
\&\fBmkvm\fR [\fB\-V\fR| \fB\-\-verbose\fR] \fInoderange\fR \fB\-\-full\fR
.Sh "For \s-1KVM:\s0"
.IX Subsection "For KVM:"
\&\fBmkvm\fR \fInoderange\fR [\fB\-m|\-\-master\fR \fImastername\fR] [\fB\-s|\-\-size\fR \fIdisksize\fR] [\fB\-\-mem\fR \fImemsize\fR] [\fB\-\-cpus\fR \fIcpucount\fR] [\fB\-f|\-\-force\fR]
.Sh "For Vmware:"
.IX Subsection "For Vmware:"
\&\fBmkvm\fR \fInoderange\fR [\fB\-s\fR|\fB\-\-size\fR \fIdisksize\fR] [\fB\-\-mem\fR \fImemsize\fR] [\fB\-\-cpus\fR \fIcpucount\fR]
.Sh "For zVM:"
.IX Subsection "For zVM:"
\&\fBmkvm\fR \fInoderange\fR [\fIdirectory_entry_file_path\fR]
.PP
\&\fBmkvm\fR \fInoderange\fR [\fIsource_virtual_machine\fR] [\fBpool=\fR \fIdisk_pool\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "For \s-1PPC:\s0"
.IX Subsection "For PPC:"
For \s-1PPC\s0 (with \s-1HMC\s0) specific:
.PP
The first form of mkvm command creates new partition(s) with the same profile/resources as the partition specified by \fIsinglenode\fR. The \-i and \fInoderange\fR specify the starting numeric partition number and the \fInoderange\fR for the newly created partitions, respectively. The \s-1LHEA\s0 port numbers and the \s-1HCA\s0 index numbers will be automatically increased if they are defined in the source partition. 
.PP
The second form of this command duplicates all the partitions from the source specified by \fIprofile\fR to the destination specified by \fIdestcec\fR. The source and destination CECs can be managed by different HMCs.
.PP
Please make sure the nodes in the \fInoderange\fR is defined in the \fInodelist\fR table and the \fImgt\fR is set to 'hmc' in the \fInodehm\fR table before running this command.
.PP
Please note that the mkvm command currently only supports creating standard LPARs, not virtual LPARs working with \s-1VIOS\s0 server.
.Sh "For \s-1KVM\s0 and Vmware:"
.IX Subsection "For KVM and Vmware:"
The mkvm command creates new virtual machine(s) with the \fIdisksize\fR size of hard disk, \fImemsize\fR size of memory and \fIcpucount\fR number of cpu. 
.PP
For \s-1KVM:\s0 If \fB\-f\fR|\fB\-\-force\fR is specified, the storage will be destroyed first if it existed.
.Sh "For zVM:"
.IX Subsection "For zVM:"
The first form of mkvm creates a new virtual machine based on a directory entry.
.PP
The second form of this creates a new virtual machine with the same profile/resources as the specified node (cloning).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h|\-\-help\fR" 10
.IX Item "-h|--help"
Display usage message.
.IP "\fB\-c\fR" 10
.IX Item "-c"
The cec (fsp) name for the destination.
.IP "\fB\-\-cpus\fR" 10
.IX Item "--cpus"
The cpu count which will be created for the kvm/vmware virtual machine.
.IP "\fB\-\-full\fR" 10
.IX Item "--full"
Request to create a new full system partition for each \s-1CEC\s0.
.IP "\fB\-f|\-\-force\fR" 10
.IX Item "-f|--force"
If \fB\-f|\-\-force\fR is specified, the storage will be destroyed first if it existed.
.IP "\fB\-i\fR" 10
.IX Item "-i"
Starting numeric id of the newly created partitions. 
.IP "\fB\-l\fR" 10
.IX Item "-l"
The partition name of the source.
.IP "\fB\-\-mem\fR" 10
.IX Item "--mem"
The memory size which will be used for the new created kvm/vmware virtual machine. Unit is Megabyte.
.IP "\fB\-p\fR" 10
.IX Item "-p"
The file that contains the profiles for the source partitions.
.IP "\fB\-s|\-\-size\fR" 10
.IX Item "-s|--size"
The size of storage which will be created for the kvm/vmware virtual machine.
.IP "\fB\-v|\-\-version\fR" 10
.IX Item "-v|--version"
Command Version.
.IP "\fB\-V|\-\-verbose\fR" 10
.IX Item "-V|--verbose"
Verbose output.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0 The command completed successfully.
.PP
1 An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
1. To create a new partition lpar5 based on the profile/resources of lpar4, enter:
.PP
.Vb 1
\& mkdef -t node -o lpar5 mgt=hmc groups=all
.Ve
.PP
then:
.PP
.Vb 1
\& mkvm lpar5 -i 5 -l lpar4
.Ve
.PP
Output is similar to:
.PP
.Vb 1
\& lpar5: Success
.Ve
.PP
2. To create new partitions lpar5\-lpar8 based on the profile/resources of lpar4, enter:
.PP
.Vb 1
\& mkdef -t node -o lpar5-lpar8 mgt=hmc groups=all
.Ve
.PP
then:
.PP
.Vb 1
\& mkvm lpar5-lpar8 -i 5 -l lpar4
.Ve
.PP
Output is similar to:
.PP
.Vb 4
\& lpar5: Success
\& lpar6: Success
\& lpar7: Success
\& lpar8: Success
.Ve
.PP
3. To duplicate all the partitions associated with cec01 on cec02, first save the lpars from cec01 to a file:
.PP
.Vb 1
\& lsvm lpar01-lpar04 > /tmp/myprofile
.Ve
.PP
then create lpars on cec02:
.PP
.Vb 1
\& mkvm lpar05-lpar08 -c cec02 -p /tmp/myprofile
.Ve
.PP
Output is similar to:
.PP
.Vb 4
\& lpar5: Success
\& lpar6: Success
\& lpar7: Success
\& lpar8: Success
.Ve
.PP
4. To duplicate all the partitions associated with cec01 on cec02, one is for cec01, the other is for cec02:
.PP
.Vb 3
\& mkdef -t node -o lpar5,lpar6 mgt=hmc groups=all
\& chtab node=lpar5 ppc.parent=cec01
\& chtab node=lpar6 ppc.parent=cec02
.Ve
.PP
then create lpars on cec01 and cec02:
.PP
.Vb 1
\& mkvm lpar5,lpar6 --full
.Ve
.PP
Output is similar to:
.PP
.Vb 2
\& lpar5: Success
\& lpar6: Success
.Ve
.PP
5. To create a new zVM virtual machine (gpok3) based on a directory entry:
.PP
.Vb 1
\& mkvm gpok3 /tmp/dirEntry.txt
.Ve
.PP
Output is similar to:
.PP
.Vb 1
\& gpok3: Creating user directory entry for LNX3... Done
.Ve
.PP
6. To clone a new zVM virtual machine with the same profile/resources as the specified node:
.PP
.Vb 1
\& mkvm gpok4 gpok3 pool=POOL1
.Ve
.PP
Output is similar to:
.PP
.Vb 20
\& gpok4: Cloning gpok3
\& gpok4: Linking source disk (0100) as (1100)
\& gpok4: Linking source disk (0101) as (1101)
\& gpok4: Stopping LNX3... Done
\& gpok4: Creating user directory entry
\& gpok4: Granting VSwitch (VSW1) access for gpok3
\& gpok4: Granting VSwitch (VSW2) access for gpok3
\& gpok4: Adding minidisk (0100)
\& gpok4: Adding minidisk (0101)
\& gpok4: Disks added (2). Disks in user entry (2)
\& gpok4: Linking target disk (0100) as (2100)
\& gpok4: Copying source disk (1100) to target disk (2100) using FLASHCOPY
\& gpok4: Mounting /dev/dasdg1 to /mnt/LNX3
\& gpok4: Setting network configuration
\& gpok4: Linking target disk (0101) as (2101)
\& gpok4: Copying source disk (1101) to target disk (2101) using FLASHCOPY
\& gpok4: Powering on
\& gpok4: Detatching source disk (0101) at (1101)
\& gpok4: Detatching source disk (0100) at (1100)
\& gpok4: Starting LNX3... Done
.Ve
.PP
7. To create a new kvm/vmware virtual machine with 10G storage, 2048M memory and 2 cpus.
.PP
.Vb 1
\& mkvm vm1 -s 10G --mem 2048 --cpus 2
.Ve
.SH "FILES"
.IX Header "FILES"
/opt/xcat/bin/mkvm
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIchvm\fR\|(1), \fIlsvm\fR\|(1), \fIrmvm\fR\|(1)

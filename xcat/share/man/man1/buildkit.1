.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUILDKIT.1 1"
.TH BUILDKIT.1 1 "2013-06-18" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBbuildkit\fR \- build a product Kit to package software for installation in an xCAT cluster.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBbuildkit\fR [\fB\-?\fR|\fB\-h\fR|\fB\-\-help\fR] [\fB\-v\fR|\fB\-\-version\fR]
.PP
To build a new Kit
.PP
\&\fBbuildkit\fR [\fB\-V\fR|\fB\-\-verbose]\fR \fIsubcommand\fR [\fIkit_name\fR] [\fIrepo_name\fR|\fBall\fR] [\fB\-l\fR|\fB\-\-kitloc\fR \fIkit_location\fR] 
.PP
To add packages to an existing Kit.
.PP
\&\fBbuildkit\fR [\fB\-V\fR|\fB\-\-verbose\fR] \fIaddpkgs\fR \fIkit_tarfile\fR [\fB\-p\fR|\fB\-\-pkgdir\fR \fIpackage_directory\fR] [\fB\-k\fR|\fB\-\-kitversion\fR \fIversion\fR] [\fB\-r\fR|\fB\-\-kitrelease\fR \fIrelease\fR] [\fB\-l\fR|\fB\-\-kitloc\fR \fIkit_location\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBbuildkit\fR command provides a collection of utilities that may be used to package a software product as a Kit tarfile that can be used to install software on the nodes of an xCAT cluster.  A Kit contains the product software packages, configuration and control information, and install and customization scripts.
.PP
You will need to run the \fBbuildkit\fR command several times with different subcommands to step through the process of building a kit:
.PP
By default the \fBbuildkit\fR subcommands will operate in the current working directory, (ie. look for files, create directories etc.).  You could specify a different location by using the "\fB\-l | \-\-kitloc\fR \fIkit_location\fR" option.
.PP
The \fIkit_location\fR is the full path name of the directory that contains the kit files. You would use the same location value for all the buildkit subcommands.
.PP
For example, to create a new kit named \*(L"prodkit\*(R" in the directory /home/mykits/ \fIeither\fR run:
.IP "1." 4
If no location is provided then the command will create a subdirectory called \*(L"prodkit\*(R" in the current directory \*(L"/home/mykits\*(R" and the new kit files will be created there.
.Sp
\&\fBcd /home/mykits\fR
.Sp
\&\fBbuildkit create prodkit\fR 
.Sp
or
.IP "2." 4
If a location is provided then the Kit files will be created there. Note that the Kit name does not necessarily have to be the directory name where the kit files are located.
.Sp
\&\fBbuidkit create prodkit \-l /home/mykits/prodkit\fR
.PP
In both cases the /home/mykits/prodkit directory is created and the inital files for the kit are created in that directory.
.PP
The following example illustrates the basic process for building a new Kit. In this example we are building a Kit named \*(L"mytstkit\*(R".
.IP "1." 4
Change to the directory where you wish to create the Kit. 
.IP "2." 4
Create a template directory for your kit:
.Sp
\&\fBbuildkit create mytstkit\fR
.IP "3." 4
Change directory to the new \*(L"mytstkit\*(R" subdirectory that was just created.
.Sp
\&\fBcd mytstkit\fR
.IP "4." 4
Edit the buildkit configuration file for your kit:
.Sp
\&\fBvi buildkit.conf\fR
.Sp
(See xCAT Kit documentation for details.)
.IP "5." 4
Create all required files, scripts, plugins, and packages for your kit.
.IP "6." 4
Validate your kit build configuration and fix any errors that are reported:
.Sp
\&\fBbuildkit chkconfig\fR
.IP "7." 4
List the repos defined in your buildkit configuration file:
.Sp
\&\fBbuildkit listrepo\fR
.IP "8." 4
For each repo name listed, build the repository.  Note that if you need to build repositories for \s-1OS\s0 distributions, versions, or architectures that do not match the current system, you may need to copy your kit template directory to an appropriate server to build that repository, and then copy the results back to your main build server.  For example, to build a repo named \*(L"rhels6.3\*(R" you would run the following command.
.Sp
\&\fBbuildkit buildrepo rhels6.3\fR 
.Sp
or, you can build all of the repos at one time if there are no \s-1OS\s0 or architecture dependencies for kitcomponent package builds or kitpackage builds:
.Sp
\&\fBbuildkit buildrepo all\fR
.IP "9." 4
Build the kit tar file:
.Sp
\&\fBbuildkit buildtar\fR
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h |\-\-help\fR" 10
.IX Item "-h |--help"
Display usage message.
.IP "\fB\-k|\-\-kitversion\fR \fIversion\fR" 10
.IX Item "-k|--kitversion version"
Product version.
.IP "\fB\-l|\-\-kitloc\fR \fIkit_location\fR" 10
.IX Item "-l|--kitloc kit_location"
The directory location of the Kit files.
.IP "\fB\-r|\-\-kitrelease\fR \fIrelease\fR" 10
.IX Item "-r|--kitrelease release"
Product release.
.IP "\fB\-V |\-\-verbose\fR" 10
.IX Item "-V |--verbose"
Verbose mode.
.IP "\fB\-v|\-\-version\fR" 10
.IX Item "-v|--version"
Command version.
.SH "SUB-COMMANDS"
.IX Header "SUB-COMMANDS"
.IP "\fBcreate\fR \fIkit_basename\fR" 10
.IX Item "create kit_basename"
Creates a new kit build directory structure for kit \fIkit_basename\fR using the location specified on the command line or the current directory.  The sample kit files from /opt/xcat/share/xcat/kits/kit_template are copied over, and the buildkit.conf file is modified for the specified \fIkit_basename\fR.
.IP "\fBchkconfig\fR" 10
.IX Item "chkconfig"
Reads the buildkit.conf file, verifies that the file syntax is correct and that all specified files exist. 
.IP "\fBlistrepo\fR" 10
.IX Item "listrepo"
Reads the buildkit.conf file, lists all Kit package repositories listed in the file, and reports the build status for each repository.
.IP "\fBbuildrepo\fR {\fIrepo_name\fR | \fBall\fR}" 10
.IX Item "buildrepo {repo_name | all}"
Reads the buildkit.conf file, and builds the specified Kit package repository.  The built packages are placed in the directory <kit_location>/build/kit_repodir/\fIrepo_name\fR.  If \fBall\fR is specified, all kit repositories are built.
.IP "\fBcleanrepo\fR {\fIrepo_name\fR | \fBall\fR}" 10
.IX Item "cleanrepo {repo_name | all}"
Reads the buildkit.conf file, and deletes all the package files and package meta data files from the <kit_location>/build/kit_repodir/\fIrepo_name\fR directory.  If \fBall\fR is specified, all kit repository files are deleted.
.IP "\fBbuildtar\fR" 10
.IX Item "buildtar"
Reads the buildkit.conf file, validates that all kit repositories have been built, and builds the Kit tar file <kit_location>/\fIkitname\fR.tar.bz2.
.IP "\fBcleantar\fR" 10
.IX Item "cleantar"
Reads the <kit_location>/buildkit.conf file and \fIdeletes\fR the following:
.RS 10
.Sp
.RS 4
\&\- Kit tar files matching <kit_location>/\fIkit_name*.tar.bz2\fR.
.Sp
\&\- <kit_location>/build/\fIkit_name\fR
.Sp
\&\- <kit_location>/rpmbuild
.Sp
\&\- <kit_location>/tmp
.Sp
\&\- <kit_location>/debbuild 
.RE
.RE
.RS 10
.Sp
Caution:  Make sure you back up any tar files you would like to keep before running this subcommand.
.RE
.IP "\fBcleanall\fR" 10
.IX Item "cleanall"
Equivalent to running \fBbuildkit cleanrepo all\fR and \fBbuildkit cleantar\fR.
.IP "\fBaddpkgs\fR" 10
.IX Item "addpkgs"
\&\fIkit_tarfile\fR {\fB\-p\fR | \fB\-\-pkgdir\fR \fIpackage_directory\fR} [\fB\-k\fR | \fB\-\-kitversion\fR \fIversion\fR] [\fB\-r\fR | \fB\-\-kitrelease\fR \fIrelease\fR]
.Sp
Add product package rpms to a previously built kit tar file.  This is used for partial product kits that are built and shipped separately from the product packages, and are identified with a \fIkit_tarfile\fR name of \fIkitname\fR.\fB\s-1NEED_PRODUCT_PKGS\s0.tar.bz2\fR. Optionally, change the kit release and version values when building the new kit tarfile.  If kitcomponent version and/or release values are defaulted to the kit values, those will also be changed and new kitcomponent rpms will be built.  If kit or kitcomponent scripts, plugins, or other files specify name, release, or version substitution strings, these will all be replaced with the new values when built into the new complete kit tarfile \fIkit_location\fR/\fInew_kitname\fR.\fBtar.bz2\fR.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
.IP "0" 3
The command completed successfully.
.IP "1" 3
.IX Item "1"
An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "1." 3
To create the sample kit shipped with the xCAT-buildkit rpm on a \s-1RHELS\s0 6.3 server and naming it \fBmykit\fR, run the following commands:
.Sp
\&\fBcd /home/myuserid/kits\fR
.Sp
\&\fBbuildkit create mykit\fR
.Sp
\&\fBcd mykit\fR
.Sp
\&\fBvi buildkit.conf\fR
.Sp
\&\fBbuildkit chkconfig\fR
.Sp
\&\fBbuildkit listrepo\fR
.Sp
\&\fBbuildkit buildrepo all \fR
.Sp
\&\fBbuildkit buildtar\fR
.IP "2." 3
To clean up a kit repository directory after build failures on a \s-1RHELS\s0 6.3 server to prepare for a new kit repository build, run:
.Sp
\&\fBbuildkit cleanrepo rhels6.3\fR
.IP "3." 3
To clean up all kit build files, including a previously built kit tar file, run
.Sp
\&\fBbuildkit cleanall\fR
.IP "4." 3
To create a kit named \*(L"tstkit\*(R" located in /home/foobar/tstkit instead of the current working directory.
.Sp
\&\fBbuildkit create tstkit \-l /home/foobar/tstkit\fR
.SH "FILES"
.IX Header "FILES"
/opt/xcat/bin/buildkit
.PP
/opt/xcat/share/xcat/kits/kit_template
.PP
/opt/xcat/share/xcat/kits/kitcomponent.spec.template
.PP
<kit location>/buildkit.conf
.PP
<kit location>/build/\fIkitname\fR/kit.conf
.PP
<kit location>/\fIkitname\fR.tar.bz2
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIaddkit\fR\|(1), \fIlskit\fR\|(1), \fIrmkit\fR\|(1), \fIaddkitcomp\fR\|(1), \fIrmkitcomp\fR\|(1), \fIchkkitcomp\fR\|(1)

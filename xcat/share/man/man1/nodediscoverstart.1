.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NODEDISCOVERSTART.1 1"
.TH NODEDISCOVERSTART.1 1 "2013-05-03" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBnodediscoverstart\fR \- starts the node discovery process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBnodediscoverstart\fR [\fB\-h\fR|\fB\-\-help\fR|\fB\-v\fR|\fB\-\-version\fR]
.PP
\&\fBSequential Discovery Specific:\fR
.Sp
.RS 2
\&\fBnodediscoverstart\fR \fBnoderange=\fR\fInoderange\fR [\fBhostiprange=\fR\fIimageprofile\fR] [\fBbmciprange=\fR\fIbmciprange\fR] [\fBgroups=\fR\fIgroups\fR] [\fBrack=\fR\fIrack\fR] [\fBchassis=\fR\fIchassis\fR] [\fBheight=\fR\fIheight\fR] [\fBunit=\fR\fIunit\fR] [\fB\-V|\-\-verbose\fR]
.RE
.PP
\&\fBProfile Discovery Specific:\fR
.Sp
.RS 2
\&\fBnodediscoverstart\fR \fBnetworkprofile=\fR\fInetwork-profile\fR \fBimageprofile=\fR\fIimage-profile\fR \fBhostnameformat=\fR\fInost-name-format\fR [\fBhardwareprofile=\fR\fIhardware-profile\fR] [\fBgroups=\fR\fInode-groups\fR] [\fBrack=\fR\fIrack-name\fR] [\fBchassis=\fR\fIchassis-name\fR] [\fBheight=\fR\fIrack-server-height\fR] [\fBunit=\fR\fIrack-server-unit-location\fR] [\fBrank=\fR\fIrank-num\fR]
.RE
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBnodediscoverstart\fR command starts either the \fBSequential Discovery\fR or \fBProfile Discovery\fR process.  They can not both be
running at the same time.
.PP
\&\fBSequential Discovery Specific:\fR
.Sp
.RS 2
This is the simplest discovery approach.  You only need to specify the \fBnoderange\fR, \fBhostiprange\fR and \fBbmciprange\fR that should be
given to nodes that are discovered.  (If you pre-define the nodes (via nodeadd or mkdef) and specify their host and \s-1BMC\s0 \s-1IP\s0 addresses,
then you only need to specify the \fBnoderange\fR to the \fBnodediscoverstart\fR command.)  Once you have run \fBnodediscoverstart\fR, then
physically power on the nodes in the sequence that you want them to receive the node names and IPs, waiting a short time (e.g. 30 seconds)
between each node.
.RE
.PP
\&\fBProfile Discovery Specific:\fR
.Sp
.RS 2
This is the \s-1PCM\s0 discovery approach.  \fInetworkprofile\fR, \fIimageprofile\fR, \fIhostnameformat\fR arguments must be specified to start the \fBProfile Discovery\fR.
All nodes discovered by this process will be associated with specified profiles and rack/chassis/unit locations.
.Sp
When the nodes are discovered, \s-1PCM\s0 updates the affected configuration files on the management node automatically. Configuration files include the /etc/hosts service file, \s-1DNS\s0 configuration, and \s-1DHCP\s0 configuration. Kit plug-ins are automatically triggered to update kit related configurations and services.
.RE
.PP
When you power on the nodes, they \s-1PXE\s0 boot and \s-1DHCP/TFTP/HTTP\s0 on the management node give each node the xCAT genesis boot image,
which inventories the node hardware and sends data to the management node.  There, either the sequential discovery process or the
profile discovery process assigns node attributes and defines the node in the the database.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fBnoderange=\fR\fInoderange\fR" 10
.IX Item "noderange=noderange"
The set of node names that should be given to nodes that are discovered via the \fBSequential Discovery\fR method.
This argument is required to \fBSequential Discovery\fR. Any valid xCAT \fBnoderange\fR is allowed, e.g. node[01\-10].
.IP "\fBhostiprange=\fR\fIip range\fR" 10
.IX Item "hostiprange=ip range"
The ip range which will be assigned to the host of new discovered nodes in the \fBSequential Discovery\fR method. The format can be: \fIstart_ip\fR\fB\-\fR\fIend_ip\fR or \fInoderange\fR, e.g. 192.168.0.1\-192.168.0.10 or 192.168.0.[1\-10].
.IP "\fBbmciprange=\fR\fIip range\fR" 10
.IX Item "bmciprange=ip range"
The ip range which will be assigned to the bmc of new discovered nodes in the \fBSequential Discovery\fR method. The format can be: \fIstart_ip\fR\fB\-\fR\fIend_ip\fR or \fInoderange\fR, e.g. 192.168.1.1\-192.168.1.10 or 192.168.1.[1\-10].
.IP "\fBimageprofile=\fR\fIimage-profile\fR" 10
.IX Item "imageprofile=image-profile"
Sets the new image profile name used by the discovered nodes in the \fBProfile Discovery\fR method.  An image profile defines the provisioning method, \s-1OS\s0 information, kit information, and provisioning parameters for a node. If the \*(L"_\|_ImageProfile_imgprofile\*(R" group already exists in the nodehm table, then \*(L"imgprofile\*(R" is used as the image profile name.
.IP "\fBnetworkprofile=\fR\fInetwork-profile\fR" 10
.IX Item "networkprofile=network-profile"
Sets the new network profile name used by the discovered nodes in the \fBProfile Discovery\fR method. A network profile defines the network, \s-1NIC\s0, and routes for a node. If the \*(L"_\|_NetworkProfile_netprofile\*(R" group already exists in the nodehm table, then \*(L"netprofile\*(R" is used as the network profile name.
.IP "\fBhardwareprofile=\fR\fIhardware-profile\fR" 10
.IX Item "hardwareprofile=hardware-profile"
Sets the new hardware profile name used by the discovered nodes in the \fBProfile Discovery\fR method. If a \*(L"_\|_HardwareProfile_hwprofile\*(R" group exists, then \*(L"hwprofile\*(R" is the hardware profile name. A hardware profile defines hardware management related information for imported nodes, including: \s-1IPMI\s0, \s-1HMC\s0, \s-1CEC\s0, \s-1CMM\s0.
.IP "\fBhostnameformat=\fR\fInost-name-format\fR" 10
.IX Item "hostnameformat=nost-name-format"
Sets the node name format for all discovered nodes in the \fBProfile Discovery\fR method. The two types of formats supported are prefix#NNNappendix and prefix#RRand#NNappendix, where wildcard #NNN and #NN are replaced by a system generated number that is based on the provisioning order. Wildcard #RR represents the rack number and stays constant.
.Sp
For example, if the node name format is compute\-#NN, the node name is generated as: compute\-00, compute\-01, ..., compute\-99. If the node name format is blade#NNN\-x64, the node name is generated as: blade001\-x64, blade002\-x64, ..., blade999\-x64
.Sp
For example, if the node name format is compute\-#RR\-#NN and the rack number is 2, the node name is generated as: compute\-02\-00, compute\-02\-01, ..., compute\-02\-99. If node name format is node\-#NN\-in\-#RR and rack number is 1, the node name is generated as: node\-00\-in\-01, node\-01\-in\-01, ..., node\-99\-in\-01
.IP "\fBgroups=\fR\fInode-groups\fR" 10
.IX Item "groups=node-groups"
Sets the node groups that the discovered nodes should be put in for either the Sequential Discovery or Profile Discovery methods, where \fInode-group\fR is a comma-separated list of node groups.
.IP "\fBrack=\fR\fIrack-name\fR>" 10
.IX Item "rack=rack-name>"
Sets the rack name where the node is located for either the Sequential Discovery or Profile Discovery methods.
.IP "\fBchasiss=\fR\fIchassis-name\fR" 10
.IX Item "chasiss=chassis-name"
Sets the chassis name that the Blade server or PureFlex blade is located in, for either the Sequential Discovery or Profile Discovery methods. This option is used for the Blade server and PureFlex system only. You cannot specify this option with the rack option.
.IP "\fBheight=\fR\fIrack-server-height\fR" 10
.IX Item "height=rack-server-height"
Sets the height of a rack-mounted server in U units for either the Sequential Discovery or Profile Discovery methods. If the rack option is not specified, the default value is 1.
.IP "\fBunit=\fR\fIrack-server-unit-location\fR" 10
.IX Item "unit=rack-server-unit-location"
Sets the start unit value for the node in the rack, for either the Sequential Discovery or Profile Discovery methods. This option is for a rack server only. If the unit option is not specified, the default value is 1
.IP "\fBrank=\fR\fIrank-num\fR" 10
.IX Item "rank=rank-num"
Specifies the starting rank number that is used in the node name format, for the Profile Discovery method.  The rank number must be a valid integer between 0 and 254. This option must be specified with nodenameformat option. For example, if your node name format is compute\-#RR\-#NN. The rack's number is 2 and rank is specified as 5, the node name is generated as follows: compute\-02\-05, compute\-02\-06, ..., compute\-02\-99.
.IP "\fB\-V|\-\-verbose\fR" 10
.IX Item "-V|--verbose"
Enumerates the free node names and host/bmc ips that are being specified in the ranges given.  Use this option
with Sequential Discovery to ensure that you are specifying the ranges you intend.
.IP "\fB\-h|\-\-help\fR" 10
.IX Item "-h|--help"
Display usage message.
.IP "\fB\-v|\-\-version\fR" 10
.IX Item "-v|--version"
Command Version.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0  The command completed successfully.
.PP
1  An error has occured.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "1" 3
.IX Item "1"
\&\fBSequential Discovery\fR: To discover nodes with noderange and host/bmc ip range:
.Sp
\&\fBnodediscoverstart noderange=n[1\-10] hostiprange='172.20.101.1\-172.20.101.10' bmciprange='172.20.102.1\-172.20.102.10' \-V\fR
.Sp
.Vb 9
\& Sequential Discovery: Started:
\&    Number of free node names: 10
\&    Number of free host ips: 10
\&    Number of free bmc ips: 10
\& ------------------------------------Free Nodes------------------------------------
\& NODE                HOST IP             BMC IP
\& n01                 172.20.101.1        172.20.102.1
\& n02                 172.20.101.2        172.20.102.2
\& ...                 ...                 ...
.Ve
.IP "2" 3
.IX Item "2"
\&\fBProfile Discovery\fR: To discover nodes using the default_cn network profile and the rhels6.3_packaged image profile, use the following command:
.Sp
\&\fBnodediscoverstart networkprofile=default_cn imageprofile=rhels6.3_packaged hostnameformat=compute#NNN\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInodediscoverstop\fR\|(1), \fInodediscoverls\fR\|(1), \fInodediscoverstatus\fR\|(1)

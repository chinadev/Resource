.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ADDKITCOMP.1 1"
.TH ADDKITCOMP.1 1 "2013-04-10" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBaddkitcomp\fR \- Assign kit components to osimage.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBaddkitcomp\fR [\-h|\-\-help]
.PP
\&\fBaddkitcomp\fR [\-a|\-\-adddeps] [\-f|\-\-force] [\-n|\-\-noupgrade] [\-V|\-\-verbose] \-i <osimage> <kitcompname_list>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBaddkitcomp\fR command will assign kit components to osimage. The kit component meta rpm, package rpm and deploy parameters will be added to osimage's otherpkg.pkglist and postbootscripts will be added to osimages's postbootscripts attribute.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-a|\-\-adddeps\fR
.PP
Assign kitcomponent dependencies to the osimage.
.PP
\&\fB\-h|\-\-help\fR
.PP
Display usage message.
.PP
\&\fB\-V|\-\-verbose\fR
.PP
Verbose mode.
.PP
\&\fB\-f|\-\-force\fR
.PP
Add kit component to osimage even if there is a mismatch in \s-1OS\s0, version, arch, serverrole, or kitcompdeps
.PP
\&\fB\-i <osimage\fR>
.PP
osimage name that kit component is assigning to
.PP
\&\fB\-n|\-\-noupgrade\fR
.PP
Allow multiple versions of kitcomponent to be installed into the osimage, instead of kitcomponent upgrade
.PP
\&\fBkitcompname_list\fR
.PP
A comma-delimited list of valid full kit component names or kit component basenames that are to be added to the osimage.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0  The command completed successfully.
.PP
1  An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
1. To assign a kit component to osimage
.PP
addkitcomp \-i rhels6.2\-ppc64\-netboot\-compute comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64
.PP
Output is similar to:
.PP
Assigning kit component comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Kit components comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64 were added to osimage rhels6.2\-ppc64\-netboot\-compute successfully
.PP
2. To assign a kit component to osimage with its dependency.
.PP
addkitcomp \-a \-i rhels6.2\-ppc64\-netboot\-compute comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64
.PP
Output is similar to:
.PP
Assigning kit component comp\-test1\-1.0\-1\-rhels\-6.0\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Assigning kit component comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Kit components comp\-test1\-1.0\-1\-rhels\-6.0\-ppc64,comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64 were added to osimage rhels6.2\-ppc64\-netboot\-compute successfully
.PP
3. To assign a kit component to osimage with incompatable osarch, osversion or ostype.
.PP
addkitcomp \-f \-i rhels6.2\-ppc64\-netboot\-compute comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64
.PP
Output is similar to:
.PP
Assigning kit component comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Kit components comp\-test1\-1.0\-1\-rhels\-6.2\-ppc64 were added to osimage rhels6.2\-ppc64\-netboot\-compute successfully
.PP
4. To assign a new version of kit component to osimage without upgrade.
.PP
addkitcomp \-n \-i rhels6.2\-ppc64\-netboot\-compute comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64
.PP
Output is similar to:
.PP
Assigning kit component comp\-test1\-1.0\-1\-rhels\-6.0\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Assigning kit component comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64 to osimage rhels6.2\-ppc64\-netboot\-compute
Kit components comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64 were added to osimage rhels6.2\-ppc64\-netboot\-compute successfully
.PP
The result will be:
lsdef \-t osimage rhels6.2\-ppc64\-netboot\-compute \-i kitcomponents
Object name: rhels6.2\-ppc64\-netboot\-compute
kitcomponents=comp\-test2\-1.0\-0\-rhels\-6.2\-ppc64,comp\-test2\-1.0\-1\-rhels\-6.2\-ppc64
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlskit\fR\|(1), \fIaddkit\fR\|(1), \fIrmkit\fR\|(1), \fIrmkitcomp\fR\|(1), \fIchkkitcomp\fR\|(1)

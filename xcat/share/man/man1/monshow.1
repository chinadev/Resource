.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MONSHOW.1 1"
.TH MONSHOW.1 1 "2013-02-06" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
\&\fBmonshow\fR \- Shows event data for monitoring.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fImonshow [\-h| \-\-help]\fR
.PP
\&\fImonshow [\-v| \-\-version]\fR
.PP
\&\fImonshow name [noderange] [\-s] [\-t time] [\-a attributes] [\-w attr<operator\fRval [\-w attr<operator>val] ... ][\-o {p|e}]>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This command displays the events that happened on the given nodes or the monitoring data that is collected from the given nodes for a monitoring plugin.
.SH "Parameters"
.IX Header "Parameters"
\&\fIname\fR is the name of the monitoring plug-in module to be invoked. 
.PP
\&\fInoderange\fR is a list of nodes to be showed for. If omitted, the data for all the nodes will be displayed.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-h | \-\-help\fR          Display usage message.
.PP
\&\fB\-v | \-\-version \fR      Command Version.
.PP
\&\fB\-s\fR	shows the summary data. 
.PP
\&\fB\-t\fR	specifies a range of time for the data, The default is last 60 minutes. For example \-t 6\-4, it will display the data from last 6 minutes to 4 minutes; If it is \-t 6, it will display the data from last 6 minutes until now.
.PP
\&\fB\-a\fR	specifies a comma-separated list of attributes or metrics names. The default is all. 
.PP
\&\fB\-w\fR	specify one or multiple selection string that can be used to select events. The operators ==, !=, =,!,>,<,>=,<= are available.  Wildcards % and _ are supported in the pattern string. % allows you to match any string of any length(including zero length) and _ allows you to match on a single character. The valid attributes are eventtype, monitor, monnode, application, component, id, serverity, message, rawdata, comments. Valid severity are: Informational, Warning, Critical.
.PP
Operator descriptions: 
  ==        Select event where the attribute value is exactly this value.
  !=        Select event where the attribute value is not this specific value.
  =~        Select event where the attribute value matches this pattern string. Not work with severity.
  !~        Select event where the attribute value does not match this pattern string. Not work with severity.
  >         Select event where the severity is higher than this value. Only work with severity.
  <         Select event where the severity is lower than this value. Only work with severity.
  >=        Select event where the severity is higher than this value(include). Only work with severity.
  <=        Select event where the severity is lower than this value(include). Only work with severity.
            Note: if the \*(L"val\*(R" or \*(L"operator\*(R" fields includes spaces or any other characters that will be parsed by shell, the \*(L"attr<operator>val\*(R" needs to be quoted. If the operator is \*(L"!~\*(R", the \*(L"attr<operator>val\*(R" needs to be quoted using single quote.
.PP
\&\fB\-o\fR	specifies montype, it can be p or e. p means performance, e means events.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
0 The command completed successfully.
.PP
1 An error has occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
1. To show summary data about PctRealMemFree and PctTotalTimeIdle of cluster in last 6 minutes, enter:
.PP
.Vb 1
\&  monshow rmcmon -s -a PctRealMemFree,PctTotalTimeIdle -t 6
.Ve
.PP
2. To show all data of node1 and node2, enter:
.PP
.Vb 1
\&  monshow rmcmon node1,node2
.Ve
.PP
3. To show summary data of nodes which managed by servicenode1, enter:
.PP
.Vb 1
\&  monshow rmcmon servicenode1 -s
.Ve
.PP
4. To show \s-1RMC\s0 event with severity Critical, enter:
.PP
.Vb 1
\&  monshow rmcmon -w severity==Critical
.Ve
.SH "FILES"
.IX Header "FILES"
/opt/xcat/bin/monshow
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImonls\fR\|(1), \fImonstart\fR\|(1), \fImonstop\fR\|(1), \fImonadd\fR\|(1), \fImonrm\fR\|(1), \fImoncfg\fR\|(1), \fImondecfg\fR\|(1)
